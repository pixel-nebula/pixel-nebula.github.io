<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>PixelNebula</title>
  <link rel="icon" href="https://cdn.jsdelivr.net/gh/pixel-nebula/pixel-nebula.github.io@master/Pictures/Logo.png" type="image/png">
  <style>
    body {
      margin: 0;
      background-color: #1e1e1e;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: white;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }

    h1 {
      font-size: 28px;
      font-weight: 600;
      margin-bottom: 20px;
    }

    .chat-container {
      width: 700px;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .chat-messages {
      background-color: #2a2a2a;
      border-radius: 16px;
      padding: 16px;
      max-height: 400px;
      overflow-y: auto;
      display: none;
    }

    .message {
      margin-bottom: 12px;
      word-wrap: break-word; 
      white-space: pre-wrap;
    }

    .user-message {
      color: #66d9ef;
    }

    .bot-message {
      color: #a6e22e;
    }

    .chat-box {
      background-color: #2a2a2a;
      border-radius: 24px;
      padding: 12px 16px;
      display: flex;
      align-items: flex-end;
      gap: 12px;
    }

    .chat-box textarea {
      flex-grow: 1;
      resize: none;
      overflow: hidden;
      background: transparent;
      border: none;
      color: white;
      font-size: 16px;
      outline: none;
      line-height: 1.5;
      max-height: 200px;
      min-height: 38px;
      padding: 8px 0;
    }

    .icon-circle {
      min-width: 36px;
      height: 36px;
      background-color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .icon-circle:hover {
      background-color: #ddd;
    }

    .icon-circle::before {
      content: 'â†‘';
      font-size: 18px;
      color: black;
    }
    #clearButton {
  position: absolute;
  top: 20px;
  right: 20px;
  background-color: #2a2a2a;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.2s;
}

  </style>
</head>
<body onload="checkLoginStatus()">
  <button onclick="clearConversation()" id="clearButton">Clear Chat</button>

  <h1>What can I help with?</h1>
  <div class="chat-container">
    <div class="chat-messages" id="chatMessages"></div>
    <div class="chat-box">
      <textarea id="chatInput" placeholder="Ask anything" rows="1"></textarea>
      <div class="icon-circle" id="sendButton"></div>
    </div>
  </div>

  <script>
    let conversationHistory = [];

    const textarea = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');
    const chatMessages = document.getElementById('chatMessages');

    textarea.addEventListener('input', () => {
      textarea.style.height = 'auto';
      textarea.style.height = textarea.scrollHeight + 'px';
    });

    textarea.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); 
        sendButton.click();    
      }
    });


    sendButton.addEventListener('click', async () => {
      const userMessage = textarea.value.trim();
      if (!userMessage) return;

      sendButton.style.pointerEvents = 'none';
      sendButton.style.opacity = '0.5';

      appendMessage('You', userMessage, 'user-message');

      textarea.value = '';
      textarea.style.height = 'auto';

      try {
        chatMessages.style.display = "block";

        const tempHistory = [...conversationHistory, { role: "user", content: userMessage }];
        const lastFew = tempHistory.slice(-4);
        const summary = lastFew.map(m => `${m.role}: ${m.content}`).join('\n');

        const url = `https://gnany3ohbd.execute-api.us-east-2.amazonaws.com/default/Formative?message=${encodeURIComponent(summary + " **DON'T START RESPONSE WITH ASSISTANT!**")}`;

        const response = await fetch(url);  
        const rawText = await response.json();  

        console.log('Raw JSON:', rawText);  


        const botMessage = rawText.response || 'Sorry, no response.';

        conversationHistory.push({ role: "user", content: userMessage });

        appendMessage('ChatGPT', botMessage, 'bot-message', typingEffect=true);
        conversationHistory.push({ role: "assistant", content: botMessage });
        localStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
      } catch (error) {
        console.error('Error:', error); 
        appendMessage('ChatGPT', 'Failed to fetch response.', 'bot-message', typingEffect=true);
      }

      sendButton.style.pointerEvents = 'auto';
      sendButton.style.opacity = '1';
    });

    function appendMessage(sender, text, className, typingEffect = false) {
  const msgDiv = document.createElement('div');
  msgDiv.classList.add('message', className);
  chatMessages.appendChild(msgDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;

  if (typingEffect) {
    let index = 0;
    msgDiv.innerHTML = `<strong>${sender}:</strong> <span id="typing-text"></span>`;
    const typingSpan = msgDiv.querySelector('#typing-text');

    const typingInterval = setInterval(() => {
      typingSpan.textContent += text.charAt(index);
      index++;
      chatMessages.scrollTop = chatMessages.scrollHeight;
      if (index === text.length) {
        clearInterval(typingInterval);
      }
    }, 30);
  } else {
    msgDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
    msgDiv.style.display = 'block';
  }
}

  </script>
</body>
</html>


<script>
      function isGoogleIDToken(token) {const jwtPattern = /^[a-zA-Z0-9\-_]+\.([a-zA-Z0-9\-_]+)\.[a-zA-Z0-9\-_]+$/; return jwtPattern.test(token);}

        function checkLoginStatus() {

          const savedHistory = localStorage.getItem('conversationHistory');
          if (savedHistory) {
            conversationHistory = JSON.parse(savedHistory);

            chatMessages.style.display = "block";

            for (const entry of conversationHistory) {
              const sender = entry.role === 'user' ? 'You' : 'ChatGPT';
              const className = entry.role === 'user' ? 'user-message' : 'bot-message';
              appendMessage(sender, entry.content, className);
            }
          }

          if (!navigator.onLine) {

            const idToken = getCookie('IDToken'); 
            if (!idToken || !isGoogleIDToken(idToken)) {window.location.href = 'index.html';}

          }
          else if (navigator.onLine) {


    const cookies = document.cookie.split(';').reduce((acc, cookie) => {
        const [key, value] = cookie.split('=').map(c => c.trim());
        acc[key] = value;
        return acc;
    }, {});

    const idToken = cookies.IDToken;

    if (!idToken) {
      window.location.href = 'index.html';
    }

}
}
</script>

<script>
  function clearConversation() {
  localStorage.removeItem('conversationHistory'); 
  conversationHistory = []; 
  chatMessages.innerHTML = ''; 
  chatMessages.style.display = "none"; 
}
</script>